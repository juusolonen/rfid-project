// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(RfidDatabaseContext))]
    [Migration("20250410200514_BorrowThings")]
    partial class BorrowThings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entities.EventBaseDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("Data")
                        .HasColumnType("jsonb");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<bool>("Faulted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Processed");

                    b.HasIndex("ReceivedAt");

                    b.ToTable("Events");

                    b.HasDiscriminator().HasValue("EventBaseDbEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Database.Entities.ToolDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BorrowedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("In")
                        .HasColumnType("boolean");

                    b.Property<string>("LastBorrower")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Out")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReturnedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Slot")
                        .HasColumnType("integer");

                    b.Property<long>("TagIdentifier")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Database.Entities.UserDbEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TagIdentifier")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Database.Entities.ProcessedEventDbEntity", b =>
                {
                    b.HasBaseType("Database.Entities.EventBaseDbEntity");

                    b.HasDiscriminator().HasValue("ProcessedEventDbEntity");
                });

            modelBuilder.Entity("Database.Entities.ProcessedEventDbEntity", b =>
                {
                    b.OwnsOne("Database.Entities.ProcessedData", "ProcessedData", b1 =>
                        {
                            b1.Property<Guid>("ProcessedEventDbEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Action")
                                .HasColumnType("text");

                            b1.Property<DateTime>("ProcessedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Tag")
                                .HasColumnType("text");

                            b1.PrimitiveCollection<List<string>>("Tools")
                                .HasColumnType("text[]");

                            b1.Property<string>("User")
                                .HasColumnType("text");

                            b1.HasKey("ProcessedEventDbEntityId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("ProcessedEventDbEntityId");
                        });

                    b.Navigation("ProcessedData")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
